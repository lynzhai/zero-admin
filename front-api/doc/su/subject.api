info(
    title: "subject "
    desc: "type desc here"
    author: "type author here"
    email: "442567835@qq.com"
    version: "1.0"
)

type(
    SubjectInfo struct {
        Id                 int64       `json:"id"`
        Uuid               string      `json:"uuid"`
        Name               string      `json:"name"`
        Status             int64       `json:"status"`
        Code               string      `json:"code"`
        MaxPersion         int64       `json:"maxPersion"`
        MainTeacherId      int64       `json:"mainTeacherId"`
        AssistantTeacherId int64       `json:"assistantTeacherId"`
        Introduce          string      `json:"introduce"`
        Backup             string      `json:"backup"`
        CreateTime         string      `json:"createTime"`
        UpdateTime         string      `json:"updateTime"`
        DeleteTime         string      `json:"deleteTime"`
    }

     SubjectAddReq  struct {
         Name               string      `json:"name" validate:"required,min=2"`
         Status             int64       `json:"status,default=1"`
         Code               string      `json:"code" validate:"required,len=8"`
         MaxPersion         int64       `json:"maxPersion" validate:"required,min=1,max=300"`
         MainTeacherId      int64       `json:"mainTeacherId" validate:"required,gt=0"`
         AssistantTeacherId int64       `json:"assistantTeacherId" validate:"gte=0"`
         Introduce          string      `json:"introduce,optional"`
         Backup             string      `json:"backup,optional"`
     }

    SubjectAddResp struct{
        Code        int64       `json:"code"`
        Message     string      `json:"message"`
        Data        SubjectInfo `json:"data"`
    }

    MainTeacherSubjectListReq  struct {
        Id int64        `json:"id" validate:"required"`   // userid
        Offset int64    `json:"offset,default=1"`
        PageSize int64  `json:"pageSize,default=10"`
    }

    MainTeacherSubjectListData struct{
        SubjectInfos     []*SubjectInfo     `json:"subjectInfos"`
        Total            int64               `json:"total"`
    }

    MainTeacherSubjectListResp struct{
        Code        int64       `json:"code"`
        Message     string      `json:"message"`
        Data        MainTeacherSubjectListData `json:"data"`
    }

    SubjectUpdateReq  struct {
        Id                 int64       `json:"id" validate:"required,gt=0"`
        Uuid               string      `json:"uuid" validate:"required,min=10"`
        Name               string      `json:"name" validate:"required,min=2"`
        Status             int64       `json:"status,defalut=1"`
        Code               string      `json:"code" validate:"required,min=8"`
        MaxPersion         int64       `json:"maxPersion" validate:"required,min=1,max=300"`
        MainTeacherId      int64       `json:"mainTeacherId" validate:"required,gt=0"`
        AssistantTeacherId int64       `json:"assistantTeacherId" validate:"gte=0"`
        Introduce          string      `json:"introduce"`
        Backup             string      `json:"backup"`
    }

    SubjectUpdateResp struct{
        Code        int64       `json:"code"`
        Message     string      `json:"message"`
        Data        SubjectInfo `json:"data"`
    }


    SubjectDeleteReq  struct {
        Id      int64 `json:"id"`   // subject id
    }

    SubjectDeleteRespData struct {
        Result       bool `json:"result"`
    }

    SubjectDeleteResp struct{
        Code        int64                  `json:"code"`
        Message     string                 `json:"message"`
        Data        SubjectDeleteRespData  `json:"data"`
    }

    SubjectFindReq  struct {
        Id      int64 `json:"id" validate:"required,gt=0"`   // subject id
    }

    SubjectFindRespData struct {
        Result       bool `json:"result"`
    }

    SubjectFindResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        SubjectInfo  `json:"data"`
    }



    FindStudentsBySubjectReq  struct {
        SubjectId      int64    `json:"subjectId" validate:"required,gt=0"`   // subject id
        Offset         int64    `json:"offset,default=1"`
        PageSize       int64    `json:"pageSize,default=10"`
    }

    FindStudentsBySubjectRespListData struct {
        PersionInfos     []*PersionInfo      `json:"persionInfos"`
        Total            int64               `json:"total"`
    }

    FindStudentsBySubjectResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        FindStudentsBySubjectRespListData  `json:"data"`
    }


    DeleteStudentInSubjectReq  struct {
        UserId        int64 `json:"userId" validate:"required,gt=0"`   // user  id
        SubjectId     int64 `json:"subjectId" validate:"required,gt=0"`   // subject  id
    }

    DeleteStudentInSubjectRespData struct {
        Result       bool `json:"result"`
    }

    DeleteStudentInSubjectResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        DeleteStudentInSubjectRespData  `json:"data"`
    }

    AddStudentInSubjectReq  struct {
        UserId           int64 `json:"userId" validate:"required,gt=0"`   // user  id
        SubejctId        int64 `json:"subjectId" validate:"required,gt=0"`   // subject  id
    }

    AddStudentInSubjectRespData struct {
        Result       bool `json:"result"`
    }

    AddStudentInSubjectResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        AddStudentInSubjectRespData  `json:"data"`
    }


    FindSubjectsByStudentReq  struct {
        UserId         int64    `json:"userId" validate:"required,gt=0"`   // user id
        Offset         int64    `json:"offset,defalut=1"`
        PageSize       int64     `json:"pageSize,defalut=10"`
    }

    FindSubjectsByStudentRespListData struct {
        SubjectInfos     []*SubjectInfo      `json:"subjectInfos"`
        Total            int64               `json:"total"`
    }

    FindSubjectsByStudentResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        FindSubjectsByStudentRespListData  `json:"data"`
    }






)

@server(
    jwt: Auth
    group: subject/subject
)
service front-api {

    @handler SubjectAdd
    post /api/subject/subject/add (SubjectAddReq) returns (SubjectAddResp)

    @handler SubjectList
    post /api/subject/subject/mainteacherlist (MainTeacherSubjectListReq) returns (MainTeacherSubjectListResp)

    @handler SubjectDelete
    post /api/subject/subject/delete (SubjectDeleteReq) returns (SubjectDeleteResp)

    @handler SubjectUpdate
    post /api/subject/subject/update (SubjectUpdateReq) returns (SubjectUpdateResp)

    @handler SubjectFind
    post /api/subject/subject/find (SubjectFindReq) returns (SubjectFindResp)



    @handler FindStudentsBySubject
    post /api/subject/subject/findstudentsbysubject (FindStudentsBySubjectReq) returns (FindStudentsBySubjectResp)

    @handler DeleteStudentInSubject
    post /api/subject/subject/deletestudentinsubject (DeleteStudentInSubjectReq) returns (DeleteStudentInSubjectResp)

    @handler AddStudentInSubject
    post /api/subject/subject/addstudentinsubject (AddStudentInSubjectReq) returns (AddStudentInSubjectResp)

    @handler FindSubjectsByStudent
    post /api/subject/student/findsubjectsbystudent (FindSubjectsByStudentReq) returns (FindSubjectsByStudentResp)



}


type (
    SignalChoiceInfo struct{
        Id string        `json:"id"`
        Title string     `json:"title"`
        Type string       `json:"type"`
        AAnswer string   `json:"aAnswer"`
        BAnswer string    `json:"bAnswer"`
        CAnswer string    `json:"cAnswer"`
        DAnswer string    `json:"dAnswer"`
        EAnswer string    `json:"eAnswer"`
        FAnswer string    `json:"fAnswer"`
        CorrectAnswer string `json:"correctAnswer"`
        Version string    `json:"version"`
        CreateTime string `json:"createTime"`
        UpdateTime string `json:"updateTime"`
        DeleteTime string `json:"deleteTime"`
    }

    AddSignalChoiceReq  struct {
        Title string     `json:"title" validate:"required,gt=4"`
        Type  string     `json:"type" validate:"required,min=1"`
        AAnswer string    `json:"aAnswer" validate:"required,min=1"`
        BAnswer string    `json:"bAnswer" validate:"required,min=1"`
        CAnswer string    `json:"cAnswer,optional"`
        DAnswer string    `json:"dAnswer,optional"`
        EAnswer string    `json:"eAnswer,optional"`
        FAnswer string    `json:"fAnswer,optional"`
        CorrectAnswer string `json:"correctAnswer,options=A|B|C|D|E|F"`
        Version string    `json:"version,optional"`
    }

    AddSignalChoiceResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        SignalChoiceInfo  `json:"data"`
    }

    UpdateSignalChoiceReq  struct {
        Id string        `json:"id" validate:"required,min=4"`
        Title string     `json:"title" validate:"required,min=4"`
        Type  string     `json:"type" validate:"required,min=1"`
        AAnswer string   `json:"aAnswer" validate:"required,min=1"`
        BAnswer string    `json:"bAnswer" validate:"required,min=1"`
        CAnswer string    `json:"cAnswer,optional"`
        DAnswer string    `json:"dAnswer,optional"`
        EAnswer string    `json:"eAnswer,optional"`
        FAnswer string    `json:"fAnswer,optional"`
        CorrectAnswer string `json:"correctAnswer,options=A|B|C|D|E|F"`
        Version string    `json:"version,optional"`
    }

    UpdateSignalChoiceResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        SignalChoiceInfo  `json:"data"`
    }

    DeleteSignalChoiceReq  struct {
        Id string        `json:"id" validate:"required,min=4"`
    }

    DeleteSignalChoiceRespData struct {
        Result       bool `json:"result"`
    }

    DeleteSignalChoiceResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        DeleteSignalChoiceRespData  `json:"data"`
    }

    FindSignalChoiceReq  struct {
        Id string        `json:"id" validate:"required,gt=4"`
    }

    FindSignalChoiceResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        SignalChoiceInfo  `json:"data"`
    }

)


@server(
    jwt: Auth
    group: subject/signalchoice
)
service front-api {
    @handler AddSignalChoice
    post /api/subject/signalchoice/addsignalchoice (AddSignalChoiceReq) returns (AddSignalChoiceResp)

    @handler UpdateSignalChoice
    post /api/subject/signalchoice/updatesignalchoice (UpdateSignalChoiceReq) returns (UpdateSignalChoiceResp)

    @handler DeleteSignalChoice
    post /api/subject/signalchoice/deletesignalchoice (DeleteSignalChoiceReq) returns (DeleteSignalChoiceResp)

    @handler FindSignalChoice
    post /api/subject/signalchoice/findsignalchoice (FindSignalChoiceReq) returns (FindSignalChoiceResp)
}




type(

    SelfPaperInfo struct{
         Id             string          `json:"id" validate:"required,min=4"`
         PaperName      string          `json:"paperName" validate:"required,min=4"`
         CreaterId      int64           `json:"createrId" validate:"required,min=4"`
         Status         int64           `json:"status"`
         StartTime      string          `json:"startTime"`
         StopTime       string          `json:"stopTime"`
         Version        string          `json:"version"`
         CreateTime     string          `json:"createTime"`
         UpdateTime     string          `json:"updateTime"`
         DeleteTime     string          `json:"deleteTime"`
         Deleted        bool            `json:"deleted"`
         PaperItems     []*PaperItem     `json:"paperItems"`
         RandomSettings []*RandomSetting `json:"randomSettings"`
    }

    RandomSetting struct{
        StartNumber   int64  `json:"startNumber" validate:"required,gt=0"`
        EndNumber     int64  `json:"endNumber" validate:"required,gt=0"`
        SubjectCount  int64  `json:"subjectCount" validate:"required,gt=0"`
    }

    ParagraphInstruction struct{
        Instruction string  `json:"instruction" validate:"required,min=1"`
        Type  string    `json:"type" validate:"required,min=1"`
    }

    PageBar struct{
        Instruction string  `json:"instruction"`
        CurrentPage int64   `json:"currentPage" validate:"required,gt=0"`
        TotalPage  int64    `json:"totalPage" validate:"required,gt=0"`
        Type string         `json:"type" validate:"required,min=1"`
    }


    SubjectNumberAndIdPair struct{
         SubjectNumber int64    `json:"subjectNumber" validate:"required,gt=0"`
         SubjectId string        `json:"subjectId" validate:"required,min=1"`
         Type string            `json:"type" validate:"required,min=1"`
    }

        // FindSelfPaper 时，any 选择题返回的结构体
     SignalChoiceWithSerial struct{
         SubjectNumber int64            `json:"subjectNumber" validate:"required,gt=0"`
         Type string                    `json:"type" validate:"required,min=1"`
         SignalChoice SignalChoiceInfo  `json:"signalChoice" validate:"required"`
    }

    PaperItem struct{
        Type string                                     `json:"type" validate:"required,min=1"`
        PageBar *PageBar                                 `json:"pageBar,optional"`
        ParagraphInstruction *ParagraphInstruction       `json:"paragraphInstruction,optional"`
        SubjectNumberAndIdPair *SubjectNumberAndIdPair   `json:"subjectNumberAndIdPair,optional"`
        SignalChoiceWithSerial *SignalChoiceWithSerial   `json:"signalChoiceWithSerial,optional"`
    }



    AddSelfPaperReq struct{
        PaperName       string          `json:"paperName" validate:"required,min=1"`
        CreaterId       int64           `json:"createrId" validate:"required,min=1"`
        Status          int64           `json:"status"`
        StartTime       string          `json:"startTime"`
        StopTime        string          `json:"stopTime"`
        Version         string          `json:"version"`
        PaperItems      []*PaperItem     `json:"paperItems"`
        RandomSettings  []*RandomSetting `json:"randomSettings,optional"`
    }

    AddSelfPaperRespData struct{
        Result bool     `json:"result"`
        Id string       `json:"id"`
    }

    AddSelfPaperResp struct{
        Code        int64          `json:"code"`
        Message     string         `json:"message"`
        Data        AddSelfPaperRespData  `json:"data"`
    }



    UpdateSelfPaperReq struct{
        Id              string                  `json:"id"`
        PaperName       string                  `json:"paperName"`
        CreaterId       int64                   `json:"createrId"`
        Status          int64                   `json:"status"`
        StartTime       string                  `json:"startTime"`
        StopTime        string                  `json:"stopTime"`
        Version         string                  `json:"version"`
        PaperItems      []*PaperItem            `json:"paperItems"`
        RandomSettings  []*RandomSetting        `json:"randomSettings,optional"`
    }

    UpdateSelfPaperRespData struct{
        Result bool `json:"result"`
    }

    UpdateSelfPaperResp struct{
        Code        int64          `json:"code"`
        Message     string         `json:"message"`
        Data        UpdateSelfPaperRespData  `json:"data"`
    }

    DeleteSelfPaperReq struct{
        Id string   `json:"id"`
    }

    DeleteSelfPaperRespData struct{
        Result bool `json:"result"`
    }

    DeleteSelfPaperResp struct{
        Code        int64        `json:"code"`
        Message     string       `json:"message"`
        Data        DeleteSelfPaperRespData  `json:"data"`
    }

    FindSelfPaperReq struct{
        Id string   `json:"id"`
    }

//    //  作为不确定的题目返回结构体
//    SignalChoiceWithSerial struct{
//        SubjectNumber int64             `json:"subjectNumber"`
//        Type          string            `json:"type"`
//        SignalChoice  SignalChoiceInfo     `json:"signalChoice"`
//    }

    FindSelfPaperResp struct{
        Code        int64          `json:"code"`
        Message     string         `json:"message"`
        Data        SelfPaperInfo  `json:"data"`
    }

)

@server(
    jwt: Auth
    group: subject/selfpaper
)
service front-api {
    @handler AddSelfPaper
    post /api/subject/selfpaper/addselfpaper (AddSelfPaperReq) returns (AddSelfPaperResp)

    @handler UpdateSelfPaper
    post /api/subject/selfpaper/updateselfpaper (UpdateSelfPaperReq) returns (UpdateSelfPaperResp)

    @handler DeleteSelfPaper
    post /api/subject/selfpaper/deleteselfpaper (DeleteSelfPaperReq) returns (DeleteSelfPaperResp)

    @handler FindSelfPaper
    post /api/subject/selfpaper/findselfpaper (FindSelfPaperReq) returns (FindSelfPaperResp)
}

