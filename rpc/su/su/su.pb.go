// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: su.proto

package su

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SubjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Uuid               string `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Status             int64  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Code               string `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"`
	MaxPersion         int64  `protobuf:"varint,6,opt,name=MaxPersion,proto3" json:"MaxPersion,omitempty"`
	MainTeacherId      int64  `protobuf:"varint,7,opt,name=MainTeacherId,proto3" json:"MainTeacherId,omitempty"`
	AssistantTeacherId int64  `protobuf:"varint,8,opt,name=AssistantTeacherId,proto3" json:"AssistantTeacherId,omitempty"`
	Introduce          string `protobuf:"bytes,9,opt,name=Introduce,proto3" json:"Introduce,omitempty"`
	Backup             string `protobuf:"bytes,10,opt,name=Backup,proto3" json:"Backup,omitempty"`
	CreateTime         string `protobuf:"bytes,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime         string `protobuf:"bytes,12,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	DeleteTime         string `protobuf:"bytes,13,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
}

func (x *SubjectInfo) Reset() {
	*x = SubjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectInfo) ProtoMessage() {}

func (x *SubjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectInfo.ProtoReflect.Descriptor instead.
func (*SubjectInfo) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{0}
}

func (x *SubjectInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SubjectInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SubjectInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubjectInfo) GetMaxPersion() int64 {
	if x != nil {
		return x.MaxPersion
	}
	return 0
}

func (x *SubjectInfo) GetMainTeacherId() int64 {
	if x != nil {
		return x.MainTeacherId
	}
	return 0
}

func (x *SubjectInfo) GetAssistantTeacherId() int64 {
	if x != nil {
		return x.AssistantTeacherId
	}
	return 0
}

func (x *SubjectInfo) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *SubjectInfo) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

func (x *SubjectInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SubjectInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SubjectInfo) GetDeleteTime() string {
	if x != nil {
		return x.DeleteTime
	}
	return ""
}

type SubjectAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Status             int64  `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Code               string `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	MaxPersion         int64  `protobuf:"varint,4,opt,name=MaxPersion,proto3" json:"MaxPersion,omitempty"`
	MainTeacherId      int64  `protobuf:"varint,5,opt,name=MainTeacherId,proto3" json:"MainTeacherId,omitempty"`
	AssistantTeacherId int64  `protobuf:"varint,6,opt,name=AssistantTeacherId,proto3" json:"AssistantTeacherId,omitempty"`
	Introduce          string `protobuf:"bytes,7,opt,name=Introduce,proto3" json:"Introduce,omitempty"`
	Backup             string `protobuf:"bytes,8,opt,name=Backup,proto3" json:"Backup,omitempty"`
}

func (x *SubjectAddReq) Reset() {
	*x = SubjectAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectAddReq) ProtoMessage() {}

func (x *SubjectAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectAddReq.ProtoReflect.Descriptor instead.
func (*SubjectAddReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{1}
}

func (x *SubjectAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectAddReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SubjectAddReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubjectAddReq) GetMaxPersion() int64 {
	if x != nil {
		return x.MaxPersion
	}
	return 0
}

func (x *SubjectAddReq) GetMainTeacherId() int64 {
	if x != nil {
		return x.MainTeacherId
	}
	return 0
}

func (x *SubjectAddReq) GetAssistantTeacherId() int64 {
	if x != nil {
		return x.AssistantTeacherId
	}
	return 0
}

func (x *SubjectAddReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *SubjectAddReq) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

type SubjectAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          bool         `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SubjectInfoData *SubjectInfo `protobuf:"bytes,2,opt,name=SubjectInfoData,proto3" json:"SubjectInfoData,omitempty"`
}

func (x *SubjectAddResp) Reset() {
	*x = SubjectAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectAddResp) ProtoMessage() {}

func (x *SubjectAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectAddResp.ProtoReflect.Descriptor instead.
func (*SubjectAddResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{2}
}

func (x *SubjectAddResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SubjectAddResp) GetSubjectInfoData() *SubjectInfo {
	if x != nil {
		return x.SubjectInfoData
	}
	return nil
}

type MainTeacherSubjectListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Offset   int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *MainTeacherSubjectListReq) Reset() {
	*x = MainTeacherSubjectListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTeacherSubjectListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTeacherSubjectListReq) ProtoMessage() {}

func (x *MainTeacherSubjectListReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTeacherSubjectListReq.ProtoReflect.Descriptor instead.
func (*MainTeacherSubjectListReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{3}
}

func (x *MainTeacherSubjectListReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MainTeacherSubjectListReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MainTeacherSubjectListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MainTeacherSubjectListReap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	List  []*SubjectInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *MainTeacherSubjectListReap) Reset() {
	*x = MainTeacherSubjectListReap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainTeacherSubjectListReap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainTeacherSubjectListReap) ProtoMessage() {}

func (x *MainTeacherSubjectListReap) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainTeacherSubjectListReap.ProtoReflect.Descriptor instead.
func (*MainTeacherSubjectListReap) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{4}
}

func (x *MainTeacherSubjectListReap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MainTeacherSubjectListReap) GetList() []*SubjectInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type SubjectUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Uuid               string `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Status             int64  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Code               string `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"`
	MaxPersion         int64  `protobuf:"varint,6,opt,name=MaxPersion,proto3" json:"MaxPersion,omitempty"`
	MainTeacherId      int64  `protobuf:"varint,7,opt,name=MainTeacherId,proto3" json:"MainTeacherId,omitempty"`
	AssistantTeacherId int64  `protobuf:"varint,8,opt,name=AssistantTeacherId,proto3" json:"AssistantTeacherId,omitempty"`
	Introduce          string `protobuf:"bytes,9,opt,name=Introduce,proto3" json:"Introduce,omitempty"`
	Backup             string `protobuf:"bytes,10,opt,name=Backup,proto3" json:"Backup,omitempty"`
}

func (x *SubjectUpdateReq) Reset() {
	*x = SubjectUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectUpdateReq) ProtoMessage() {}

func (x *SubjectUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectUpdateReq.ProtoReflect.Descriptor instead.
func (*SubjectUpdateReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{5}
}

func (x *SubjectUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectUpdateReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SubjectUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectUpdateReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SubjectUpdateReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubjectUpdateReq) GetMaxPersion() int64 {
	if x != nil {
		return x.MaxPersion
	}
	return 0
}

func (x *SubjectUpdateReq) GetMainTeacherId() int64 {
	if x != nil {
		return x.MainTeacherId
	}
	return 0
}

func (x *SubjectUpdateReq) GetAssistantTeacherId() int64 {
	if x != nil {
		return x.AssistantTeacherId
	}
	return 0
}

func (x *SubjectUpdateReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *SubjectUpdateReq) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

type SubjectUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          bool         `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SubjectInfoData *SubjectInfo `protobuf:"bytes,2,opt,name=SubjectInfoData,proto3" json:"SubjectInfoData,omitempty"`
}

func (x *SubjectUpdateResp) Reset() {
	*x = SubjectUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectUpdateResp) ProtoMessage() {}

func (x *SubjectUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectUpdateResp.ProtoReflect.Descriptor instead.
func (*SubjectUpdateResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{6}
}

func (x *SubjectUpdateResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SubjectUpdateResp) GetSubjectInfoData() *SubjectInfo {
	if x != nil {
		return x.SubjectInfoData
	}
	return nil
}

type SubjectDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SubjectDeleteReq) Reset() {
	*x = SubjectDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectDeleteReq) ProtoMessage() {}

func (x *SubjectDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectDeleteReq.ProtoReflect.Descriptor instead.
func (*SubjectDeleteReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{7}
}

func (x *SubjectDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubjectDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *SubjectDeleteResp) Reset() {
	*x = SubjectDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectDeleteResp) ProtoMessage() {}

func (x *SubjectDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectDeleteResp.ProtoReflect.Descriptor instead.
func (*SubjectDeleteResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{8}
}

func (x *SubjectDeleteResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SubjectFindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId int64 `protobuf:"varint,1,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
}

func (x *SubjectFindReq) Reset() {
	*x = SubjectFindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectFindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectFindReq) ProtoMessage() {}

func (x *SubjectFindReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectFindReq.ProtoReflect.Descriptor instead.
func (*SubjectFindReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{9}
}

func (x *SubjectFindReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type SubjectFindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectInfoData *SubjectInfo `protobuf:"bytes,1,opt,name=SubjectInfoData,proto3" json:"SubjectInfoData,omitempty"`
}

func (x *SubjectFindResp) Reset() {
	*x = SubjectFindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectFindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectFindResp) ProtoMessage() {}

func (x *SubjectFindResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectFindResp.ProtoReflect.Descriptor instead.
func (*SubjectFindResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{10}
}

func (x *SubjectFindResp) GetSubjectInfoData() *SubjectInfo {
	if x != nil {
		return x.SubjectInfoData
	}
	return nil
}

type SubjectLearnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SubjectId  int64  `protobuf:"varint,3,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	CreateTime string `protobuf:"bytes,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (x *SubjectLearnInfo) Reset() {
	*x = SubjectLearnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnInfo) ProtoMessage() {}

func (x *SubjectLearnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnInfo.ProtoReflect.Descriptor instead.
func (*SubjectLearnInfo) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{11}
}

func (x *SubjectLearnInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectLearnInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubjectLearnInfo) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SubjectLearnInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type SubjectLearnAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SubjectId int64 `protobuf:"varint,2,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
}

func (x *SubjectLearnAddReq) Reset() {
	*x = SubjectLearnAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnAddReq) ProtoMessage() {}

func (x *SubjectLearnAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnAddReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnAddReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{12}
}

func (x *SubjectLearnAddReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubjectLearnAddReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type SubjectLearnAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result               bool              `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SubjectLearnInfoData *SubjectLearnInfo `protobuf:"bytes,2,opt,name=SubjectLearnInfoData,proto3" json:"SubjectLearnInfoData,omitempty"`
}

func (x *SubjectLearnAddResp) Reset() {
	*x = SubjectLearnAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnAddResp) ProtoMessage() {}

func (x *SubjectLearnAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnAddResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnAddResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{13}
}

func (x *SubjectLearnAddResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SubjectLearnAddResp) GetSubjectLearnInfoData() *SubjectLearnInfo {
	if x != nil {
		return x.SubjectLearnInfoData
	}
	return nil
}

type SubjectLearnDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SubjectLearnDeleteReq) Reset() {
	*x = SubjectLearnDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnDeleteReq) ProtoMessage() {}

func (x *SubjectLearnDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnDeleteReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnDeleteReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{14}
}

func (x *SubjectLearnDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubjectLearnDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *SubjectLearnDeleteResp) Reset() {
	*x = SubjectLearnDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnDeleteResp) ProtoMessage() {}

func (x *SubjectLearnDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnDeleteResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnDeleteResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{15}
}

func (x *SubjectLearnDeleteResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SubjectLearnUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId    int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SubjectId int64 `protobuf:"varint,3,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
}

func (x *SubjectLearnUpdateReq) Reset() {
	*x = SubjectLearnUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnUpdateReq) ProtoMessage() {}

func (x *SubjectLearnUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnUpdateReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnUpdateReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{16}
}

func (x *SubjectLearnUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectLearnUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubjectLearnUpdateReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type SubjectLearnUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result               bool              `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SubjectLearnInfoData *SubjectLearnInfo `protobuf:"bytes,2,opt,name=SubjectLearnInfoData,proto3" json:"SubjectLearnInfoData,omitempty"`
}

func (x *SubjectLearnUpdateResp) Reset() {
	*x = SubjectLearnUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnUpdateResp) ProtoMessage() {}

func (x *SubjectLearnUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnUpdateResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnUpdateResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{17}
}

func (x *SubjectLearnUpdateResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SubjectLearnUpdateResp) GetSubjectLearnInfoData() *SubjectLearnInfo {
	if x != nil {
		return x.SubjectLearnInfoData
	}
	return nil
}

type SubjectLearnFindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SubjectLearnFindReq) Reset() {
	*x = SubjectLearnFindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindReq) ProtoMessage() {}

func (x *SubjectLearnFindReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{18}
}

func (x *SubjectLearnFindReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubjectLearnFindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectLearnInfoData *SubjectLearnInfo `protobuf:"bytes,1,opt,name=SubjectLearnInfoData,proto3" json:"SubjectLearnInfoData,omitempty"`
}

func (x *SubjectLearnFindResp) Reset() {
	*x = SubjectLearnFindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindResp) ProtoMessage() {}

func (x *SubjectLearnFindResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{19}
}

func (x *SubjectLearnFindResp) GetSubjectLearnInfoData() *SubjectLearnInfo {
	if x != nil {
		return x.SubjectLearnInfoData
	}
	return nil
}

type SubjectLearnFindListByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Offset   int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *SubjectLearnFindListByUserIdReq) Reset() {
	*x = SubjectLearnFindListByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindListByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindListByUserIdReq) ProtoMessage() {}

func (x *SubjectLearnFindListByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindListByUserIdReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindListByUserIdReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{20}
}

func (x *SubjectLearnFindListByUserIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubjectLearnFindListByUserIdReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SubjectLearnFindListByUserIdReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubjectLearnFindListByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	List  []*SubjectLearnInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *SubjectLearnFindListByUserIdResp) Reset() {
	*x = SubjectLearnFindListByUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindListByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindListByUserIdResp) ProtoMessage() {}

func (x *SubjectLearnFindListByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindListByUserIdResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindListByUserIdResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{21}
}

func (x *SubjectLearnFindListByUserIdResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SubjectLearnFindListByUserIdResp) GetList() []*SubjectLearnInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type SubjectLearnFindListBySubjectIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId int64 `protobuf:"varint,1,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	Offset    int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	PageSize  int64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *SubjectLearnFindListBySubjectIdReq) Reset() {
	*x = SubjectLearnFindListBySubjectIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindListBySubjectIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindListBySubjectIdReq) ProtoMessage() {}

func (x *SubjectLearnFindListBySubjectIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindListBySubjectIdReq.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindListBySubjectIdReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{22}
}

func (x *SubjectLearnFindListBySubjectIdReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SubjectLearnFindListBySubjectIdReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SubjectLearnFindListBySubjectIdReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubjectLearnFindListBySubjectIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64               `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	List  []*SubjectLearnInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *SubjectLearnFindListBySubjectIdResp) Reset() {
	*x = SubjectLearnFindListBySubjectIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectLearnFindListBySubjectIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectLearnFindListBySubjectIdResp) ProtoMessage() {}

func (x *SubjectLearnFindListBySubjectIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectLearnFindListBySubjectIdResp.ProtoReflect.Descriptor instead.
func (*SubjectLearnFindListBySubjectIdResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{23}
}

func (x *SubjectLearnFindListBySubjectIdResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SubjectLearnFindListBySubjectIdResp) GetList() []*SubjectLearnInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type PersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	UniqueId    string `protobuf:"bytes,4,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`
	Number      string `protobuf:"bytes,5,opt,name=Number,proto3" json:"Number,omitempty"`
	Email       string `protobuf:"bytes,6,opt,name=Email,proto3" json:"Email,omitempty"`
	Gender      string `protobuf:"bytes,7,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Name        string `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	RoleId      int64  `protobuf:"varint,9,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	RoleType    string `protobuf:"bytes,10,opt,name=RoleType,proto3" json:"RoleType,omitempty"`
	State       int64  `protobuf:"varint,11,opt,name=State,proto3" json:"State,omitempty"`
	CreateTime  string `protobuf:"bytes,12,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,13,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	Class       string `protobuf:"bytes,14,opt,name=Class,proto3" json:"Class,omitempty"`
	Academy     string `protobuf:"bytes,15,opt,name=Academy,proto3" json:"Academy,omitempty"`
	School      string `protobuf:"bytes,16,opt,name=School,proto3" json:"School,omitempty"`
	Grade       string `protobuf:"bytes,17,opt,name=Grade,proto3" json:"Grade,omitempty"`
}

func (x *PersionInfo) Reset() {
	*x = PersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersionInfo) ProtoMessage() {}

func (x *PersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersionInfo.ProtoReflect.Descriptor instead.
func (*PersionInfo) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{24}
}

func (x *PersionInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersionInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PersionInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PersionInfo) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *PersionInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PersionInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PersionInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PersionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersionInfo) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *PersionInfo) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

func (x *PersionInfo) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PersionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PersionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PersionInfo) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *PersionInfo) GetAcademy() string {
	if x != nil {
		return x.Academy
	}
	return ""
}

func (x *PersionInfo) GetSchool() string {
	if x != nil {
		return x.School
	}
	return ""
}

func (x *PersionInfo) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type FindStudentsInSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId int64 `protobuf:"varint,2,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
	Offset    int64 `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	PageSize  int64 `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *FindStudentsInSubjectReq) Reset() {
	*x = FindStudentsInSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindStudentsInSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindStudentsInSubjectReq) ProtoMessage() {}

func (x *FindStudentsInSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindStudentsInSubjectReq.ProtoReflect.Descriptor instead.
func (*FindStudentsInSubjectReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{25}
}

func (x *FindStudentsInSubjectReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *FindStudentsInSubjectReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindStudentsInSubjectReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindStudentsInSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	List  []*PersionInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *FindStudentsInSubjectResp) Reset() {
	*x = FindStudentsInSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindStudentsInSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindStudentsInSubjectResp) ProtoMessage() {}

func (x *FindStudentsInSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindStudentsInSubjectResp.ProtoReflect.Descriptor instead.
func (*FindStudentsInSubjectResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{26}
}

func (x *FindStudentsInSubjectResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindStudentsInSubjectResp) GetList() []*PersionInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type FindSubjectByStudentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Offset   int64 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	PageSize int64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *FindSubjectByStudentReq) Reset() {
	*x = FindSubjectByStudentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSubjectByStudentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSubjectByStudentReq) ProtoMessage() {}

func (x *FindSubjectByStudentReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSubjectByStudentReq.ProtoReflect.Descriptor instead.
func (*FindSubjectByStudentReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{27}
}

func (x *FindSubjectByStudentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindSubjectByStudentReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindSubjectByStudentReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindSubjectByStudentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	List  []*SubjectInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *FindSubjectByStudentResp) Reset() {
	*x = FindSubjectByStudentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSubjectByStudentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSubjectByStudentResp) ProtoMessage() {}

func (x *FindSubjectByStudentResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSubjectByStudentResp.ProtoReflect.Descriptor instead.
func (*FindSubjectByStudentResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{28}
}

func (x *FindSubjectByStudentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindSubjectByStudentResp) GetList() []*SubjectInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type AddStudentToSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SubjectId int64 `protobuf:"varint,2,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
}

func (x *AddStudentToSubjectReq) Reset() {
	*x = AddStudentToSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStudentToSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentToSubjectReq) ProtoMessage() {}

func (x *AddStudentToSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentToSubjectReq.ProtoReflect.Descriptor instead.
func (*AddStudentToSubjectReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{29}
}

func (x *AddStudentToSubjectReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddStudentToSubjectReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type AddStudentToSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AddStudentToSubjectResp) Reset() {
	*x = AddStudentToSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddStudentToSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStudentToSubjectResp) ProtoMessage() {}

func (x *AddStudentToSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStudentToSubjectResp.ProtoReflect.Descriptor instead.
func (*AddStudentToSubjectResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{30}
}

func (x *AddStudentToSubjectResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteStudentInSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SubjectId int64 `protobuf:"varint,2,opt,name=SubjectId,proto3" json:"SubjectId,omitempty"`
}

func (x *DeleteStudentInSubjectReq) Reset() {
	*x = DeleteStudentInSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStudentInSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStudentInSubjectReq) ProtoMessage() {}

func (x *DeleteStudentInSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStudentInSubjectReq.ProtoReflect.Descriptor instead.
func (*DeleteStudentInSubjectReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteStudentInSubjectReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteStudentInSubjectReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type DeleteStudentInSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *DeleteStudentInSubjectResp) Reset() {
	*x = DeleteStudentInSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStudentInSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStudentInSubjectResp) ProtoMessage() {}

func (x *DeleteStudentInSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStudentInSubjectResp.ProtoReflect.Descriptor instead.
func (*DeleteStudentInSubjectResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteStudentInSubjectResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SignalChoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	AAnswer       string `protobuf:"bytes,3,opt,name=AAnswer,proto3" json:"AAnswer,omitempty"`
	BAnswer       string `protobuf:"bytes,4,opt,name=BAnswer,proto3" json:"BAnswer,omitempty"`
	CAnswer       string `protobuf:"bytes,5,opt,name=CAnswer,proto3" json:"CAnswer,omitempty"`
	DAnswer       string `protobuf:"bytes,6,opt,name=DAnswer,proto3" json:"DAnswer,omitempty"`
	EAnswer       string `protobuf:"bytes,7,opt,name=EAnswer,proto3" json:"EAnswer,omitempty"`
	FAnswer       string `protobuf:"bytes,8,opt,name=FAnswer,proto3" json:"FAnswer,omitempty"`
	CorrectAnswer string `protobuf:"bytes,9,opt,name=CorrectAnswer,proto3" json:"CorrectAnswer,omitempty"`
	Version       string `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
	CreateTime    string `protobuf:"bytes,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime    string `protobuf:"bytes,12,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	DeleteTime    string `protobuf:"bytes,13,opt,name=deleteTime,proto3" json:"deleteTime,omitempty"`
}

func (x *SignalChoiceInfo) Reset() {
	*x = SignalChoiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalChoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalChoiceInfo) ProtoMessage() {}

func (x *SignalChoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalChoiceInfo.ProtoReflect.Descriptor instead.
func (*SignalChoiceInfo) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{33}
}

func (x *SignalChoiceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SignalChoiceInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SignalChoiceInfo) GetAAnswer() string {
	if x != nil {
		return x.AAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetBAnswer() string {
	if x != nil {
		return x.BAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetCAnswer() string {
	if x != nil {
		return x.CAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetDAnswer() string {
	if x != nil {
		return x.DAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetEAnswer() string {
	if x != nil {
		return x.EAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetFAnswer() string {
	if x != nil {
		return x.FAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *SignalChoiceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SignalChoiceInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SignalChoiceInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SignalChoiceInfo) GetDeleteTime() string {
	if x != nil {
		return x.DeleteTime
	}
	return ""
}

type AddSignalChoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	AAnswer       string `protobuf:"bytes,2,opt,name=AAnswer,proto3" json:"AAnswer,omitempty"`
	BAnswer       string `protobuf:"bytes,3,opt,name=BAnswer,proto3" json:"BAnswer,omitempty"`
	CAnswer       string `protobuf:"bytes,4,opt,name=CAnswer,proto3" json:"CAnswer,omitempty"`
	DAnswer       string `protobuf:"bytes,5,opt,name=DAnswer,proto3" json:"DAnswer,omitempty"`
	EAnswer       string `protobuf:"bytes,6,opt,name=EAnswer,proto3" json:"EAnswer,omitempty"`
	FAnswer       string `protobuf:"bytes,7,opt,name=FAnswer,proto3" json:"FAnswer,omitempty"`
	CorrectAnswer string `protobuf:"bytes,8,opt,name=CorrectAnswer,proto3" json:"CorrectAnswer,omitempty"`
	Version       string `protobuf:"bytes,9,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *AddSignalChoiceReq) Reset() {
	*x = AddSignalChoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSignalChoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSignalChoiceReq) ProtoMessage() {}

func (x *AddSignalChoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSignalChoiceReq.ProtoReflect.Descriptor instead.
func (*AddSignalChoiceReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{34}
}

func (x *AddSignalChoiceReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddSignalChoiceReq) GetAAnswer() string {
	if x != nil {
		return x.AAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetBAnswer() string {
	if x != nil {
		return x.BAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetCAnswer() string {
	if x != nil {
		return x.CAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetDAnswer() string {
	if x != nil {
		return x.DAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetEAnswer() string {
	if x != nil {
		return x.EAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetFAnswer() string {
	if x != nil {
		return x.FAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *AddSignalChoiceReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AddSignalChoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       bool              `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SignalChoice *SignalChoiceInfo `protobuf:"bytes,2,opt,name=SignalChoice,proto3" json:"SignalChoice,omitempty"`
}

func (x *AddSignalChoiceResp) Reset() {
	*x = AddSignalChoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSignalChoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSignalChoiceResp) ProtoMessage() {}

func (x *AddSignalChoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSignalChoiceResp.ProtoReflect.Descriptor instead.
func (*AddSignalChoiceResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{35}
}

func (x *AddSignalChoiceResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *AddSignalChoiceResp) GetSignalChoice() *SignalChoiceInfo {
	if x != nil {
		return x.SignalChoice
	}
	return nil
}

type UpdateSignalChoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	AAnswer       string `protobuf:"bytes,3,opt,name=AAnswer,proto3" json:"AAnswer,omitempty"`
	BAnswer       string `protobuf:"bytes,4,opt,name=BAnswer,proto3" json:"BAnswer,omitempty"`
	CAnswer       string `protobuf:"bytes,5,opt,name=CAnswer,proto3" json:"CAnswer,omitempty"`
	DAnswer       string `protobuf:"bytes,6,opt,name=DAnswer,proto3" json:"DAnswer,omitempty"`
	EAnswer       string `protobuf:"bytes,7,opt,name=EAnswer,proto3" json:"EAnswer,omitempty"`
	FAnswer       string `protobuf:"bytes,8,opt,name=FAnswer,proto3" json:"FAnswer,omitempty"`
	CorrectAnswer string `protobuf:"bytes,9,opt,name=CorrectAnswer,proto3" json:"CorrectAnswer,omitempty"`
	Version       string `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *UpdateSignalChoiceReq) Reset() {
	*x = UpdateSignalChoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSignalChoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignalChoiceReq) ProtoMessage() {}

func (x *UpdateSignalChoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignalChoiceReq.ProtoReflect.Descriptor instead.
func (*UpdateSignalChoiceReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateSignalChoiceReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetAAnswer() string {
	if x != nil {
		return x.AAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetBAnswer() string {
	if x != nil {
		return x.BAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetCAnswer() string {
	if x != nil {
		return x.CAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetDAnswer() string {
	if x != nil {
		return x.DAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetEAnswer() string {
	if x != nil {
		return x.EAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetFAnswer() string {
	if x != nil {
		return x.FAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *UpdateSignalChoiceReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateSignalChoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       bool              `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	SignalChoice *SignalChoiceInfo `protobuf:"bytes,2,opt,name=SignalChoice,proto3" json:"SignalChoice,omitempty"`
}

func (x *UpdateSignalChoiceResp) Reset() {
	*x = UpdateSignalChoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSignalChoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignalChoiceResp) ProtoMessage() {}

func (x *UpdateSignalChoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignalChoiceResp.ProtoReflect.Descriptor instead.
func (*UpdateSignalChoiceResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateSignalChoiceResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateSignalChoiceResp) GetSignalChoice() *SignalChoiceInfo {
	if x != nil {
		return x.SignalChoice
	}
	return nil
}

type DeleteSignalChoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeleteSignalChoiceReq) Reset() {
	*x = DeleteSignalChoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSignalChoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignalChoiceReq) ProtoMessage() {}

func (x *DeleteSignalChoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignalChoiceReq.ProtoReflect.Descriptor instead.
func (*DeleteSignalChoiceReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteSignalChoiceReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSignalChoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *DeleteSignalChoiceResp) Reset() {
	*x = DeleteSignalChoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSignalChoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignalChoiceResp) ProtoMessage() {}

func (x *DeleteSignalChoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignalChoiceResp.ProtoReflect.Descriptor instead.
func (*DeleteSignalChoiceResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteSignalChoiceResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type FindSignalChoiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *FindSignalChoiceReq) Reset() {
	*x = FindSignalChoiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSignalChoiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSignalChoiceReq) ProtoMessage() {}

func (x *FindSignalChoiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSignalChoiceReq.ProtoReflect.Descriptor instead.
func (*FindSignalChoiceReq) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{40}
}

func (x *FindSignalChoiceReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindSignalChoiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalChoice *SignalChoiceInfo `protobuf:"bytes,1,opt,name=SignalChoice,proto3" json:"SignalChoice,omitempty"`
}

func (x *FindSignalChoiceResp) Reset() {
	*x = FindSignalChoiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_su_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSignalChoiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSignalChoiceResp) ProtoMessage() {}

func (x *FindSignalChoiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_su_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSignalChoiceResp.ProtoReflect.Descriptor instead.
func (*FindSignalChoiceResp) Descriptor() ([]byte, []int) {
	return file_su_proto_rawDescGZIP(), []int{41}
}

func (x *FindSignalChoiceResp) GetSignalChoice() *SignalChoiceInfo {
	if x != nil {
		return x.SignalChoice
	}
	return nil
}

var File_su_proto protoreflect.FileDescriptor

var file_su_proto_rawDesc = []byte{
	0x0a, 0x08, 0x73, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73, 0x75, 0x22, 0xfd,
	0x02, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb,
	0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x63, 0x0a, 0x0e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x5f, 0x0a, 0x19, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x57, 0x0a, 0x1a, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x22, 0x66, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2e, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x4a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x77, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x62, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x65, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x56, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x55, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x46, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x42, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x99, 0x02, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x46, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x25, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x32, 0xb4, 0x0b, 0x0a, 0x02, 0x53, 0x75, 0x12,
	0x33, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x12, 0x11, 0x2e,
	0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x73, 0x75, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x2e,
	0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1c, 0x2e, 0x73, 0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x73, 0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x73, 0x75,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x73, 0x75, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a,
	0x1b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x73,
	0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x73, 0x75, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e,
	0x73, 0x75, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73, 0x75, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x73, 0x75, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73,
	0x75, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x73,
	0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x75, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_su_proto_rawDescOnce sync.Once
	file_su_proto_rawDescData = file_su_proto_rawDesc
)

func file_su_proto_rawDescGZIP() []byte {
	file_su_proto_rawDescOnce.Do(func() {
		file_su_proto_rawDescData = protoimpl.X.CompressGZIP(file_su_proto_rawDescData)
	})
	return file_su_proto_rawDescData
}

var file_su_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_su_proto_goTypes = []interface{}{
	(*SubjectInfo)(nil),                         // 0: su.SubjectInfo
	(*SubjectAddReq)(nil),                       // 1: su.SubjectAddReq
	(*SubjectAddResp)(nil),                      // 2: su.SubjectAddResp
	(*MainTeacherSubjectListReq)(nil),           // 3: su.MainTeacherSubjectListReq
	(*MainTeacherSubjectListReap)(nil),          // 4: su.MainTeacherSubjectListReap
	(*SubjectUpdateReq)(nil),                    // 5: su.SubjectUpdateReq
	(*SubjectUpdateResp)(nil),                   // 6: su.SubjectUpdateResp
	(*SubjectDeleteReq)(nil),                    // 7: su.SubjectDeleteReq
	(*SubjectDeleteResp)(nil),                   // 8: su.SubjectDeleteResp
	(*SubjectFindReq)(nil),                      // 9: su.SubjectFindReq
	(*SubjectFindResp)(nil),                     // 10: su.SubjectFindResp
	(*SubjectLearnInfo)(nil),                    // 11: su.SubjectLearnInfo
	(*SubjectLearnAddReq)(nil),                  // 12: su.SubjectLearnAddReq
	(*SubjectLearnAddResp)(nil),                 // 13: su.SubjectLearnAddResp
	(*SubjectLearnDeleteReq)(nil),               // 14: su.SubjectLearnDeleteReq
	(*SubjectLearnDeleteResp)(nil),              // 15: su.SubjectLearnDeleteResp
	(*SubjectLearnUpdateReq)(nil),               // 16: su.SubjectLearnUpdateReq
	(*SubjectLearnUpdateResp)(nil),              // 17: su.SubjectLearnUpdateResp
	(*SubjectLearnFindReq)(nil),                 // 18: su.SubjectLearnFindReq
	(*SubjectLearnFindResp)(nil),                // 19: su.SubjectLearnFindResp
	(*SubjectLearnFindListByUserIdReq)(nil),     // 20: su.SubjectLearnFindListByUserIdReq
	(*SubjectLearnFindListByUserIdResp)(nil),    // 21: su.SubjectLearnFindListByUserIdResp
	(*SubjectLearnFindListBySubjectIdReq)(nil),  // 22: su.SubjectLearnFindListBySubjectIdReq
	(*SubjectLearnFindListBySubjectIdResp)(nil), // 23: su.SubjectLearnFindListBySubjectIdResp
	(*PersionInfo)(nil),                         // 24: su.PersionInfo
	(*FindStudentsInSubjectReq)(nil),            // 25: su.FindStudentsInSubjectReq
	(*FindStudentsInSubjectResp)(nil),           // 26: su.FindStudentsInSubjectResp
	(*FindSubjectByStudentReq)(nil),             // 27: su.FindSubjectByStudentReq
	(*FindSubjectByStudentResp)(nil),            // 28: su.FindSubjectByStudentResp
	(*AddStudentToSubjectReq)(nil),              // 29: su.AddStudentToSubjectReq
	(*AddStudentToSubjectResp)(nil),             // 30: su.AddStudentToSubjectResp
	(*DeleteStudentInSubjectReq)(nil),           // 31: su.DeleteStudentInSubjectReq
	(*DeleteStudentInSubjectResp)(nil),          // 32: su.DeleteStudentInSubjectResp
	(*SignalChoiceInfo)(nil),                    // 33: su.SignalChoiceInfo
	(*AddSignalChoiceReq)(nil),                  // 34: su.AddSignalChoiceReq
	(*AddSignalChoiceResp)(nil),                 // 35: su.AddSignalChoiceResp
	(*UpdateSignalChoiceReq)(nil),               // 36: su.UpdateSignalChoiceReq
	(*UpdateSignalChoiceResp)(nil),              // 37: su.UpdateSignalChoiceResp
	(*DeleteSignalChoiceReq)(nil),               // 38: su.DeleteSignalChoiceReq
	(*DeleteSignalChoiceResp)(nil),              // 39: su.DeleteSignalChoiceResp
	(*FindSignalChoiceReq)(nil),                 // 40: su.FindSignalChoiceReq
	(*FindSignalChoiceResp)(nil),                // 41: su.FindSignalChoiceResp
}
var file_su_proto_depIdxs = []int32{
	0,  // 0: su.SubjectAddResp.SubjectInfoData:type_name -> su.SubjectInfo
	0,  // 1: su.MainTeacherSubjectListReap.List:type_name -> su.SubjectInfo
	0,  // 2: su.SubjectUpdateResp.SubjectInfoData:type_name -> su.SubjectInfo
	0,  // 3: su.SubjectFindResp.SubjectInfoData:type_name -> su.SubjectInfo
	11, // 4: su.SubjectLearnAddResp.SubjectLearnInfoData:type_name -> su.SubjectLearnInfo
	11, // 5: su.SubjectLearnUpdateResp.SubjectLearnInfoData:type_name -> su.SubjectLearnInfo
	11, // 6: su.SubjectLearnFindResp.SubjectLearnInfoData:type_name -> su.SubjectLearnInfo
	11, // 7: su.SubjectLearnFindListByUserIdResp.List:type_name -> su.SubjectLearnInfo
	11, // 8: su.SubjectLearnFindListBySubjectIdResp.List:type_name -> su.SubjectLearnInfo
	24, // 9: su.FindStudentsInSubjectResp.List:type_name -> su.PersionInfo
	0,  // 10: su.FindSubjectByStudentResp.List:type_name -> su.SubjectInfo
	33, // 11: su.AddSignalChoiceResp.SignalChoice:type_name -> su.SignalChoiceInfo
	33, // 12: su.UpdateSignalChoiceResp.SignalChoice:type_name -> su.SignalChoiceInfo
	33, // 13: su.FindSignalChoiceResp.SignalChoice:type_name -> su.SignalChoiceInfo
	1,  // 14: su.Su.SubjectAdd:input_type -> su.SubjectAddReq
	3,  // 15: su.Su.SubjectList:input_type -> su.MainTeacherSubjectListReq
	5,  // 16: su.Su.SubjectUpdate:input_type -> su.SubjectUpdateReq
	7,  // 17: su.Su.SubjectDelete:input_type -> su.SubjectDeleteReq
	9,  // 18: su.Su.SubjectFind:input_type -> su.SubjectFindReq
	25, // 19: su.Su.FindStudentsInSubject:input_type -> su.FindStudentsInSubjectReq
	27, // 20: su.Su.FindSubjectByStudent:input_type -> su.FindSubjectByStudentReq
	29, // 21: su.Su.AddStudentToSubject:input_type -> su.AddStudentToSubjectReq
	31, // 22: su.Su.DeleteStudentInSubject:input_type -> su.DeleteStudentInSubjectReq
	12, // 23: su.Su.SubjectLearnAdd:input_type -> su.SubjectLearnAddReq
	16, // 24: su.Su.SubjectLearnUpdate:input_type -> su.SubjectLearnUpdateReq
	14, // 25: su.Su.SubjectLearnDelete:input_type -> su.SubjectLearnDeleteReq
	18, // 26: su.Su.SubjectLearnFind:input_type -> su.SubjectLearnFindReq
	20, // 27: su.Su.SubjectLearnFindLisByUserId:input_type -> su.SubjectLearnFindListByUserIdReq
	22, // 28: su.Su.SubjectLearnFindLisBySubjectId:input_type -> su.SubjectLearnFindListBySubjectIdReq
	34, // 29: su.Su.AddSignalChoice:input_type -> su.AddSignalChoiceReq
	36, // 30: su.Su.UpdateSignalChoice:input_type -> su.UpdateSignalChoiceReq
	38, // 31: su.Su.DeleteSignalChoice:input_type -> su.DeleteSignalChoiceReq
	40, // 32: su.Su.FindSignalChoice:input_type -> su.FindSignalChoiceReq
	2,  // 33: su.Su.SubjectAdd:output_type -> su.SubjectAddResp
	4,  // 34: su.Su.SubjectList:output_type -> su.MainTeacherSubjectListReap
	6,  // 35: su.Su.SubjectUpdate:output_type -> su.SubjectUpdateResp
	8,  // 36: su.Su.SubjectDelete:output_type -> su.SubjectDeleteResp
	10, // 37: su.Su.SubjectFind:output_type -> su.SubjectFindResp
	26, // 38: su.Su.FindStudentsInSubject:output_type -> su.FindStudentsInSubjectResp
	28, // 39: su.Su.FindSubjectByStudent:output_type -> su.FindSubjectByStudentResp
	30, // 40: su.Su.AddStudentToSubject:output_type -> su.AddStudentToSubjectResp
	32, // 41: su.Su.DeleteStudentInSubject:output_type -> su.DeleteStudentInSubjectResp
	13, // 42: su.Su.SubjectLearnAdd:output_type -> su.SubjectLearnAddResp
	17, // 43: su.Su.SubjectLearnUpdate:output_type -> su.SubjectLearnUpdateResp
	15, // 44: su.Su.SubjectLearnDelete:output_type -> su.SubjectLearnDeleteResp
	19, // 45: su.Su.SubjectLearnFind:output_type -> su.SubjectLearnFindResp
	21, // 46: su.Su.SubjectLearnFindLisByUserId:output_type -> su.SubjectLearnFindListByUserIdResp
	23, // 47: su.Su.SubjectLearnFindLisBySubjectId:output_type -> su.SubjectLearnFindListBySubjectIdResp
	35, // 48: su.Su.AddSignalChoice:output_type -> su.AddSignalChoiceResp
	37, // 49: su.Su.UpdateSignalChoice:output_type -> su.UpdateSignalChoiceResp
	39, // 50: su.Su.DeleteSignalChoice:output_type -> su.DeleteSignalChoiceResp
	41, // 51: su.Su.FindSignalChoice:output_type -> su.FindSignalChoiceResp
	33, // [33:52] is the sub-list for method output_type
	14, // [14:33] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_su_proto_init() }
func file_su_proto_init() {
	if File_su_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_su_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTeacherSubjectListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainTeacherSubjectListReap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectFindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectFindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindListByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindListByUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindListBySubjectIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectLearnFindListBySubjectIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindStudentsInSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindStudentsInSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSubjectByStudentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSubjectByStudentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStudentToSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddStudentToSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStudentInSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStudentInSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalChoiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSignalChoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSignalChoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSignalChoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSignalChoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSignalChoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSignalChoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSignalChoiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_su_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSignalChoiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_su_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_su_proto_goTypes,
		DependencyIndexes: file_su_proto_depIdxs,
		MessageInfos:      file_su_proto_msgTypes,
	}.Build()
	File_su_proto = out.File
	file_su_proto_rawDesc = nil
	file_su_proto_goTypes = nil
	file_su_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SuClient is the client API for Su service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuClient interface {
	SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error)
	SubjectList(ctx context.Context, in *MainTeacherSubjectListReq, opts ...grpc.CallOption) (*MainTeacherSubjectListReap, error)
	SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error)
	SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error)
	// 根据subjectid 查抄subject 表内容
	SubjectFind(ctx context.Context, in *SubjectFindReq, opts ...grpc.CallOption) (*SubjectFindResp, error)
	// 查询某个Subject中的学生内容
	FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq, opts ...grpc.CallOption) (*FindStudentsInSubjectResp, error)
	// 查询课程中的 学生信息
	FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq, opts ...grpc.CallOption) (*FindSubjectByStudentResp, error)
	// 添加学生到课程
	AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq, opts ...grpc.CallOption) (*AddStudentToSubjectResp, error)
	// 从课程中删除学生
	DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq, opts ...grpc.CallOption) (*DeleteStudentInSubjectResp, error)
	SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq, opts ...grpc.CallOption) (*SubjectLearnAddResp, error)
	SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq, opts ...grpc.CallOption) (*SubjectLearnUpdateResp, error)
	SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq, opts ...grpc.CallOption) (*SubjectLearnDeleteResp, error)
	SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq, opts ...grpc.CallOption) (*SubjectLearnFindResp, error)
	SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq, opts ...grpc.CallOption) (*SubjectLearnFindListByUserIdResp, error)
	SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq, opts ...grpc.CallOption) (*SubjectLearnFindListBySubjectIdResp, error)
	AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq, opts ...grpc.CallOption) (*AddSignalChoiceResp, error)
	UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq, opts ...grpc.CallOption) (*UpdateSignalChoiceResp, error)
	DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq, opts ...grpc.CallOption) (*DeleteSignalChoiceResp, error)
	FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq, opts ...grpc.CallOption) (*FindSignalChoiceResp, error)
}

type suClient struct {
	cc grpc.ClientConnInterface
}

func NewSuClient(cc grpc.ClientConnInterface) SuClient {
	return &suClient{cc}
}

func (c *suClient) SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error) {
	out := new(SubjectAddResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectList(ctx context.Context, in *MainTeacherSubjectListReq, opts ...grpc.CallOption) (*MainTeacherSubjectListReap, error) {
	out := new(MainTeacherSubjectListReap)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error) {
	out := new(SubjectUpdateResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error) {
	out := new(SubjectDeleteResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectFind(ctx context.Context, in *SubjectFindReq, opts ...grpc.CallOption) (*SubjectFindResp, error) {
	out := new(SubjectFindResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq, opts ...grpc.CallOption) (*FindStudentsInSubjectResp, error) {
	out := new(FindStudentsInSubjectResp)
	err := c.cc.Invoke(ctx, "/su.Su/FindStudentsInSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq, opts ...grpc.CallOption) (*FindSubjectByStudentResp, error) {
	out := new(FindSubjectByStudentResp)
	err := c.cc.Invoke(ctx, "/su.Su/FindSubjectByStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq, opts ...grpc.CallOption) (*AddStudentToSubjectResp, error) {
	out := new(AddStudentToSubjectResp)
	err := c.cc.Invoke(ctx, "/su.Su/AddStudentToSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq, opts ...grpc.CallOption) (*DeleteStudentInSubjectResp, error) {
	out := new(DeleteStudentInSubjectResp)
	err := c.cc.Invoke(ctx, "/su.Su/DeleteStudentInSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq, opts ...grpc.CallOption) (*SubjectLearnAddResp, error) {
	out := new(SubjectLearnAddResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq, opts ...grpc.CallOption) (*SubjectLearnUpdateResp, error) {
	out := new(SubjectLearnUpdateResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq, opts ...grpc.CallOption) (*SubjectLearnDeleteResp, error) {
	out := new(SubjectLearnDeleteResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq, opts ...grpc.CallOption) (*SubjectLearnFindResp, error) {
	out := new(SubjectLearnFindResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq, opts ...grpc.CallOption) (*SubjectLearnFindListByUserIdResp, error) {
	out := new(SubjectLearnFindListByUserIdResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnFindLisByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq, opts ...grpc.CallOption) (*SubjectLearnFindListBySubjectIdResp, error) {
	out := new(SubjectLearnFindListBySubjectIdResp)
	err := c.cc.Invoke(ctx, "/su.Su/SubjectLearnFindLisBySubjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq, opts ...grpc.CallOption) (*AddSignalChoiceResp, error) {
	out := new(AddSignalChoiceResp)
	err := c.cc.Invoke(ctx, "/su.Su/AddSignalChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq, opts ...grpc.CallOption) (*UpdateSignalChoiceResp, error) {
	out := new(UpdateSignalChoiceResp)
	err := c.cc.Invoke(ctx, "/su.Su/UpdateSignalChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq, opts ...grpc.CallOption) (*DeleteSignalChoiceResp, error) {
	out := new(DeleteSignalChoiceResp)
	err := c.cc.Invoke(ctx, "/su.Su/DeleteSignalChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suClient) FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq, opts ...grpc.CallOption) (*FindSignalChoiceResp, error) {
	out := new(FindSignalChoiceResp)
	err := c.cc.Invoke(ctx, "/su.Su/FindSignalChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuServer is the server API for Su service.
type SuServer interface {
	SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error)
	SubjectList(context.Context, *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error)
	SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error)
	SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error)
	// 根据subjectid 查抄subject 表内容
	SubjectFind(context.Context, *SubjectFindReq) (*SubjectFindResp, error)
	// 查询某个Subject中的学生内容
	FindStudentsInSubject(context.Context, *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error)
	// 查询课程中的 学生信息
	FindSubjectByStudent(context.Context, *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error)
	// 添加学生到课程
	AddStudentToSubject(context.Context, *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error)
	// 从课程中删除学生
	DeleteStudentInSubject(context.Context, *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error)
	SubjectLearnAdd(context.Context, *SubjectLearnAddReq) (*SubjectLearnAddResp, error)
	SubjectLearnUpdate(context.Context, *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error)
	SubjectLearnDelete(context.Context, *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error)
	SubjectLearnFind(context.Context, *SubjectLearnFindReq) (*SubjectLearnFindResp, error)
	SubjectLearnFindLisByUserId(context.Context, *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error)
	SubjectLearnFindLisBySubjectId(context.Context, *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error)
	AddSignalChoice(context.Context, *AddSignalChoiceReq) (*AddSignalChoiceResp, error)
	UpdateSignalChoice(context.Context, *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error)
	DeleteSignalChoice(context.Context, *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error)
	FindSignalChoice(context.Context, *FindSignalChoiceReq) (*FindSignalChoiceResp, error)
}

// UnimplementedSuServer can be embedded to have forward compatible implementations.
type UnimplementedSuServer struct {
}

func (*UnimplementedSuServer) SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectAdd not implemented")
}
func (*UnimplementedSuServer) SubjectList(context.Context, *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectList not implemented")
}
func (*UnimplementedSuServer) SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectUpdate not implemented")
}
func (*UnimplementedSuServer) SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectDelete not implemented")
}
func (*UnimplementedSuServer) SubjectFind(context.Context, *SubjectFindReq) (*SubjectFindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectFind not implemented")
}
func (*UnimplementedSuServer) FindStudentsInSubject(context.Context, *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStudentsInSubject not implemented")
}
func (*UnimplementedSuServer) FindSubjectByStudent(context.Context, *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSubjectByStudent not implemented")
}
func (*UnimplementedSuServer) AddStudentToSubject(context.Context, *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentToSubject not implemented")
}
func (*UnimplementedSuServer) DeleteStudentInSubject(context.Context, *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentInSubject not implemented")
}
func (*UnimplementedSuServer) SubjectLearnAdd(context.Context, *SubjectLearnAddReq) (*SubjectLearnAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnAdd not implemented")
}
func (*UnimplementedSuServer) SubjectLearnUpdate(context.Context, *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnUpdate not implemented")
}
func (*UnimplementedSuServer) SubjectLearnDelete(context.Context, *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnDelete not implemented")
}
func (*UnimplementedSuServer) SubjectLearnFind(context.Context, *SubjectLearnFindReq) (*SubjectLearnFindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnFind not implemented")
}
func (*UnimplementedSuServer) SubjectLearnFindLisByUserId(context.Context, *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnFindLisByUserId not implemented")
}
func (*UnimplementedSuServer) SubjectLearnFindLisBySubjectId(context.Context, *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectLearnFindLisBySubjectId not implemented")
}
func (*UnimplementedSuServer) AddSignalChoice(context.Context, *AddSignalChoiceReq) (*AddSignalChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSignalChoice not implemented")
}
func (*UnimplementedSuServer) UpdateSignalChoice(context.Context, *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignalChoice not implemented")
}
func (*UnimplementedSuServer) DeleteSignalChoice(context.Context, *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignalChoice not implemented")
}
func (*UnimplementedSuServer) FindSignalChoice(context.Context, *FindSignalChoiceReq) (*FindSignalChoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSignalChoice not implemented")
}

func RegisterSuServer(s *grpc.Server, srv SuServer) {
	s.RegisterService(&_Su_serviceDesc, srv)
}

func _Su_SubjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectAdd(ctx, req.(*SubjectAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainTeacherSubjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectList(ctx, req.(*MainTeacherSubjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectUpdate(ctx, req.(*SubjectUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectDelete(ctx, req.(*SubjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectFind(ctx, req.(*SubjectFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_FindStudentsInSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStudentsInSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).FindStudentsInSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/FindStudentsInSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).FindStudentsInSubject(ctx, req.(*FindStudentsInSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_FindSubjectByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSubjectByStudentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).FindSubjectByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/FindSubjectByStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).FindSubjectByStudent(ctx, req.(*FindSubjectByStudentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_AddStudentToSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentToSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).AddStudentToSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/AddStudentToSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).AddStudentToSubject(ctx, req.(*AddStudentToSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_DeleteStudentInSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentInSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).DeleteStudentInSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/DeleteStudentInSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).DeleteStudentInSubject(ctx, req.(*DeleteStudentInSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnAdd(ctx, req.(*SubjectLearnAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnUpdate(ctx, req.(*SubjectLearnUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnDelete(ctx, req.(*SubjectLearnDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnFind(ctx, req.(*SubjectLearnFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnFindLisByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnFindListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnFindLisByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnFindLisByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnFindLisByUserId(ctx, req.(*SubjectLearnFindListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_SubjectLearnFindLisBySubjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectLearnFindListBySubjectIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).SubjectLearnFindLisBySubjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/SubjectLearnFindLisBySubjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).SubjectLearnFindLisBySubjectId(ctx, req.(*SubjectLearnFindListBySubjectIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_AddSignalChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSignalChoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).AddSignalChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/AddSignalChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).AddSignalChoice(ctx, req.(*AddSignalChoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_UpdateSignalChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSignalChoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).UpdateSignalChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/UpdateSignalChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).UpdateSignalChoice(ctx, req.(*UpdateSignalChoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_DeleteSignalChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSignalChoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).DeleteSignalChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/DeleteSignalChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).DeleteSignalChoice(ctx, req.(*DeleteSignalChoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Su_FindSignalChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSignalChoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuServer).FindSignalChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/su.Su/FindSignalChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuServer).FindSignalChoice(ctx, req.(*FindSignalChoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Su_serviceDesc = grpc.ServiceDesc{
	ServiceName: "su.Su",
	HandlerType: (*SuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubjectAdd",
			Handler:    _Su_SubjectAdd_Handler,
		},
		{
			MethodName: "SubjectList",
			Handler:    _Su_SubjectList_Handler,
		},
		{
			MethodName: "SubjectUpdate",
			Handler:    _Su_SubjectUpdate_Handler,
		},
		{
			MethodName: "SubjectDelete",
			Handler:    _Su_SubjectDelete_Handler,
		},
		{
			MethodName: "SubjectFind",
			Handler:    _Su_SubjectFind_Handler,
		},
		{
			MethodName: "FindStudentsInSubject",
			Handler:    _Su_FindStudentsInSubject_Handler,
		},
		{
			MethodName: "FindSubjectByStudent",
			Handler:    _Su_FindSubjectByStudent_Handler,
		},
		{
			MethodName: "AddStudentToSubject",
			Handler:    _Su_AddStudentToSubject_Handler,
		},
		{
			MethodName: "DeleteStudentInSubject",
			Handler:    _Su_DeleteStudentInSubject_Handler,
		},
		{
			MethodName: "SubjectLearnAdd",
			Handler:    _Su_SubjectLearnAdd_Handler,
		},
		{
			MethodName: "SubjectLearnUpdate",
			Handler:    _Su_SubjectLearnUpdate_Handler,
		},
		{
			MethodName: "SubjectLearnDelete",
			Handler:    _Su_SubjectLearnDelete_Handler,
		},
		{
			MethodName: "SubjectLearnFind",
			Handler:    _Su_SubjectLearnFind_Handler,
		},
		{
			MethodName: "SubjectLearnFindLisByUserId",
			Handler:    _Su_SubjectLearnFindLisByUserId_Handler,
		},
		{
			MethodName: "SubjectLearnFindLisBySubjectId",
			Handler:    _Su_SubjectLearnFindLisBySubjectId_Handler,
		},
		{
			MethodName: "AddSignalChoice",
			Handler:    _Su_AddSignalChoice_Handler,
		},
		{
			MethodName: "UpdateSignalChoice",
			Handler:    _Su_UpdateSignalChoice_Handler,
		},
		{
			MethodName: "DeleteSignalChoice",
			Handler:    _Su_DeleteSignalChoice_Handler,
		},
		{
			MethodName: "FindSignalChoice",
			Handler:    _Su_FindSignalChoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "su.proto",
}
