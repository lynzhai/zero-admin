// Code generated by goctl. DO NOT EDIT!
// Source: su.proto

//go:generate mockgen -destination ./su_mock.go -package suclient -source $GOFILE

package suclient

import (
	"context"

	"go-zero-admin/rpc/su/su"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	SubjectFindResp                     = su.SubjectFindResp
	SubjectLearnDeleteReq               = su.SubjectLearnDeleteReq
	SubjectLearnFindResp                = su.SubjectLearnFindResp
	FindStudentsInSubjectReq            = su.FindStudentsInSubjectReq
	SubjectAddResp                      = su.SubjectAddResp
	SubjectAddReq                       = su.SubjectAddReq
	SubjectDeleteReq                    = su.SubjectDeleteReq
	FindSubjectByStudentResp            = su.FindSubjectByStudentResp
	UpdateSignalChoiceReq               = su.UpdateSignalChoiceReq
	SubjectInfo                         = su.SubjectInfo
	SubjectUpdateResp                   = su.SubjectUpdateResp
	SubjectFindReq                      = su.SubjectFindReq
	SubjectLearnInfo                    = su.SubjectLearnInfo
	FindSubjectByStudentReq             = su.FindSubjectByStudentReq
	AddSignalChoiceResp                 = su.AddSignalChoiceResp
	MainTeacherSubjectListReq           = su.MainTeacherSubjectListReq
	SignalChoiceInfo                    = su.SignalChoiceInfo
	SubjectLearnUpdateReq               = su.SubjectLearnUpdateReq
	AddStudentToSubjectResp             = su.AddStudentToSubjectResp
	UpdateSignalChoiceResp              = su.UpdateSignalChoiceResp
	SubjectLearnFindListByUserIdReq     = su.SubjectLearnFindListByUserIdReq
	SubjectLearnUpdateResp              = su.SubjectLearnUpdateResp
	SubjectLearnFindListBySubjectIdReq  = su.SubjectLearnFindListBySubjectIdReq
	SubjectLearnFindListBySubjectIdResp = su.SubjectLearnFindListBySubjectIdResp
	FindStudentsInSubjectResp           = su.FindStudentsInSubjectResp
	AddSignalChoiceReq                  = su.AddSignalChoiceReq
	DeleteSignalChoiceResp              = su.DeleteSignalChoiceResp
	SubjectLearnAddResp                 = su.SubjectLearnAddResp
	SubjectUpdateReq                    = su.SubjectUpdateReq
	SubjectDeleteResp                   = su.SubjectDeleteResp
	SubjectLearnAddReq                  = su.SubjectLearnAddReq
	SubjectLearnFindReq                 = su.SubjectLearnFindReq
	PersionInfo                         = su.PersionInfo
	AddStudentToSubjectReq              = su.AddStudentToSubjectReq
	DeleteSignalChoiceReq               = su.DeleteSignalChoiceReq
	MainTeacherSubjectListReap          = su.MainTeacherSubjectListReap
	FindSignalChoiceReq                 = su.FindSignalChoiceReq
	SubjectLearnFindListByUserIdResp    = su.SubjectLearnFindListByUserIdResp
	DeleteStudentInSubjectReq           = su.DeleteStudentInSubjectReq
	DeleteStudentInSubjectResp          = su.DeleteStudentInSubjectResp
	FindSignalChoiceResp                = su.FindSignalChoiceResp
	SubjectLearnDeleteResp              = su.SubjectLearnDeleteResp

	Su interface {
		SubjectAdd(ctx context.Context, in *SubjectAddReq) (*SubjectAddResp, error)
		SubjectList(ctx context.Context, in *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error)
		SubjectUpdate(ctx context.Context, in *SubjectUpdateReq) (*SubjectUpdateResp, error)
		SubjectDelete(ctx context.Context, in *SubjectDeleteReq) (*SubjectDeleteResp, error)
		//  根据subjectid 查抄subject 表内容
		SubjectFind(ctx context.Context, in *SubjectFindReq) (*SubjectFindResp, error)
		//  查询某个Subject中的学生内容
		FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error)
		//  查询课程中的 学生信息
		FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error)
		//  添加学生到课程
		AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error)
		//  从课程中删除学生
		DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error)
		SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq) (*SubjectLearnAddResp, error)
		SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error)
		SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error)
		SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq) (*SubjectLearnFindResp, error)
		SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error)
		SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error)
		AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq) (*AddSignalChoiceResp, error)
		UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error)
		DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error)
		FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq) (*FindSignalChoiceResp, error)
	}

	defaultSu struct {
		cli zrpc.Client
	}
)

func NewSu(cli zrpc.Client) Su {
	return &defaultSu{
		cli: cli,
	}
}

func (m *defaultSu) SubjectAdd(ctx context.Context, in *SubjectAddReq) (*SubjectAddResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectAdd(ctx, in)
}

func (m *defaultSu) SubjectList(ctx context.Context, in *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectList(ctx, in)
}

func (m *defaultSu) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectUpdate(ctx, in)
}

func (m *defaultSu) SubjectDelete(ctx context.Context, in *SubjectDeleteReq) (*SubjectDeleteResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectDelete(ctx, in)
}

//  根据subjectid 查抄subject 表内容
func (m *defaultSu) SubjectFind(ctx context.Context, in *SubjectFindReq) (*SubjectFindResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectFind(ctx, in)
}

//  查询某个Subject中的学生内容
func (m *defaultSu) FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindStudentsInSubject(ctx, in)
}

//  查询课程中的 学生信息
func (m *defaultSu) FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindSubjectByStudent(ctx, in)
}

//  添加学生到课程
func (m *defaultSu) AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.AddStudentToSubject(ctx, in)
}

//  从课程中删除学生
func (m *defaultSu) DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.DeleteStudentInSubject(ctx, in)
}

func (m *defaultSu) SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq) (*SubjectLearnAddResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnAdd(ctx, in)
}

func (m *defaultSu) SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnUpdate(ctx, in)
}

func (m *defaultSu) SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnDelete(ctx, in)
}

func (m *defaultSu) SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq) (*SubjectLearnFindResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFind(ctx, in)
}

func (m *defaultSu) SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFindLisByUserId(ctx, in)
}

func (m *defaultSu) SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFindLisBySubjectId(ctx, in)
}

func (m *defaultSu) AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq) (*AddSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.AddSignalChoice(ctx, in)
}

func (m *defaultSu) UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.UpdateSignalChoice(ctx, in)
}

func (m *defaultSu) DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.DeleteSignalChoice(ctx, in)
}

func (m *defaultSu) FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq) (*FindSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindSignalChoice(ctx, in)
}
