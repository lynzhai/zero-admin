// Code generated by goctl. DO NOT EDIT!
// Source: su.proto

//go:generate mockgen -destination ./su_mock.go -package suclient -source $GOFILE

package suclient

import (
	"context"

	"go-zero-admin/rpc/su/su"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	FindSelfPaperResp                   = su.FindSelfPaperResp
	SubjectLearnAddResp                 = su.SubjectLearnAddResp
	DeleteSignalChoiceReq               = su.DeleteSignalChoiceReq
	AddSelfPaperResp                    = su.AddSelfPaperResp
	SignalChoiceInfo                    = su.SignalChoiceInfo
	AddSignalChoiceResp                 = su.AddSignalChoiceResp
	UpdateSignalChoiceReq               = su.UpdateSignalChoiceReq
	FindSignalChoiceReq                 = su.FindSignalChoiceReq
	PaperItem                           = su.PaperItem
	SubjectUpdateResp                   = su.SubjectUpdateResp
	DeleteStudentInSubjectReq           = su.DeleteStudentInSubjectReq
	DeleteSelfPaperReq                  = su.DeleteSelfPaperReq
	SubjectLearnFindResp                = su.SubjectLearnFindResp
	SubjectLearnFindListBySubjectIdResp = su.SubjectLearnFindListBySubjectIdResp
	ParagraphInstruction                = su.ParagraphInstruction
	MainTeacherSubjectListReap          = su.MainTeacherSubjectListReap
	SelfPaperInfo                       = su.SelfPaperInfo
	SubjectLearnAddReq                  = su.SubjectLearnAddReq
	DeleteSignalChoiceResp              = su.DeleteSignalChoiceResp
	FindSignalChoiceResp                = su.FindSignalChoiceResp
	FindSubjectByStudentReq             = su.FindSubjectByStudentReq
	DeleteStudentInSubjectResp          = su.DeleteStudentInSubjectResp
	UpdateSelfPaperReq                  = su.UpdateSelfPaperReq
	SubjectAddResp                      = su.SubjectAddResp
	SubjectDeleteReq                    = su.SubjectDeleteReq
	SubjectLearnFindListByUserIdResp    = su.SubjectLearnFindListByUserIdResp
	SubjectNumberAndIdPair              = su.SubjectNumberAndIdPair
	PageBar                             = su.PageBar
	AddSelfPaperReq                     = su.AddSelfPaperReq
	SubjectDeleteResp                   = su.SubjectDeleteResp
	SubjectFindReq                      = su.SubjectFindReq
	AddStudentToSubjectResp             = su.AddStudentToSubjectResp
	SubjectLearnFindListByUserIdReq     = su.SubjectLearnFindListByUserIdReq
	FindStudentsInSubjectResp           = su.FindStudentsInSubjectResp
	UpdateSelfPaperResp                 = su.UpdateSelfPaperResp
	FindSelfPaperReq                    = su.FindSelfPaperReq
	SubjectAddReq                       = su.SubjectAddReq
	SubjectLearnUpdateReq               = su.SubjectLearnUpdateReq
	SubjectLearnUpdateResp              = su.SubjectLearnUpdateResp
	SubjectLearnDeleteReq               = su.SubjectLearnDeleteReq
	SubjectLearnDeleteResp              = su.SubjectLearnDeleteResp
	PersionInfo                         = su.PersionInfo
	SubjectLearnInfo                    = su.SubjectLearnInfo
	FindSubjectByStudentResp            = su.FindSubjectByStudentResp
	SignalChoiceWithSerial              = su.SignalChoiceWithSerial
	AddStudentToSubjectReq              = su.AddStudentToSubjectReq
	UpdateSignalChoiceResp              = su.UpdateSignalChoiceResp
	RandomSetting                       = su.RandomSetting
	DeleteSelfPaperResp                 = su.DeleteSelfPaperResp
	MainTeacherSubjectListReq           = su.MainTeacherSubjectListReq
	SubjectUpdateReq                    = su.SubjectUpdateReq
	SubjectLearnFindListBySubjectIdReq  = su.SubjectLearnFindListBySubjectIdReq
	FindStudentsInSubjectReq            = su.FindStudentsInSubjectReq
	AddSignalChoiceReq                  = su.AddSignalChoiceReq
	SubjectInfo                         = su.SubjectInfo
	SubjectFindResp                     = su.SubjectFindResp
	SubjectLearnFindReq                 = su.SubjectLearnFindReq

	Su interface {
		SubjectAdd(ctx context.Context, in *SubjectAddReq) (*SubjectAddResp, error)
		SubjectList(ctx context.Context, in *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error)
		SubjectUpdate(ctx context.Context, in *SubjectUpdateReq) (*SubjectUpdateResp, error)
		SubjectDelete(ctx context.Context, in *SubjectDeleteReq) (*SubjectDeleteResp, error)
		//  根据subjectid 查抄subject 表内容
		SubjectFind(ctx context.Context, in *SubjectFindReq) (*SubjectFindResp, error)
		//  查询某个Subject中的学生内容
		FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error)
		//  查询课程中的 学生信息
		FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error)
		//  添加学生到课程
		AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error)
		//  从课程中删除学生
		DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error)
		SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq) (*SubjectLearnAddResp, error)
		SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error)
		SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error)
		SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq) (*SubjectLearnFindResp, error)
		SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error)
		SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error)
		AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq) (*AddSignalChoiceResp, error)
		UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error)
		DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error)
		FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq) (*FindSignalChoiceResp, error)
		AddSelfPaper(ctx context.Context, in *AddSelfPaperReq) (*AddSelfPaperResp, error)
		UpdateSelfPaper(ctx context.Context, in *UpdateSelfPaperReq) (*UpdateSelfPaperResp, error)
		DeleteSelfPaper(ctx context.Context, in *DeleteSelfPaperReq) (*DeleteSelfPaperResp, error)
		FindSelfPaper(ctx context.Context, in *FindSelfPaperReq) (*FindSelfPaperResp, error)
	}

	defaultSu struct {
		cli zrpc.Client
	}
)

func NewSu(cli zrpc.Client) Su {
	return &defaultSu{
		cli: cli,
	}
}

func (m *defaultSu) SubjectAdd(ctx context.Context, in *SubjectAddReq) (*SubjectAddResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectAdd(ctx, in)
}

func (m *defaultSu) SubjectList(ctx context.Context, in *MainTeacherSubjectListReq) (*MainTeacherSubjectListReap, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectList(ctx, in)
}

func (m *defaultSu) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectUpdate(ctx, in)
}

func (m *defaultSu) SubjectDelete(ctx context.Context, in *SubjectDeleteReq) (*SubjectDeleteResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectDelete(ctx, in)
}

//  根据subjectid 查抄subject 表内容
func (m *defaultSu) SubjectFind(ctx context.Context, in *SubjectFindReq) (*SubjectFindResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectFind(ctx, in)
}

//  查询某个Subject中的学生内容
func (m *defaultSu) FindStudentsInSubject(ctx context.Context, in *FindStudentsInSubjectReq) (*FindStudentsInSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindStudentsInSubject(ctx, in)
}

//  查询课程中的 学生信息
func (m *defaultSu) FindSubjectByStudent(ctx context.Context, in *FindSubjectByStudentReq) (*FindSubjectByStudentResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindSubjectByStudent(ctx, in)
}

//  添加学生到课程
func (m *defaultSu) AddStudentToSubject(ctx context.Context, in *AddStudentToSubjectReq) (*AddStudentToSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.AddStudentToSubject(ctx, in)
}

//  从课程中删除学生
func (m *defaultSu) DeleteStudentInSubject(ctx context.Context, in *DeleteStudentInSubjectReq) (*DeleteStudentInSubjectResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.DeleteStudentInSubject(ctx, in)
}

func (m *defaultSu) SubjectLearnAdd(ctx context.Context, in *SubjectLearnAddReq) (*SubjectLearnAddResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnAdd(ctx, in)
}

func (m *defaultSu) SubjectLearnUpdate(ctx context.Context, in *SubjectLearnUpdateReq) (*SubjectLearnUpdateResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnUpdate(ctx, in)
}

func (m *defaultSu) SubjectLearnDelete(ctx context.Context, in *SubjectLearnDeleteReq) (*SubjectLearnDeleteResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnDelete(ctx, in)
}

func (m *defaultSu) SubjectLearnFind(ctx context.Context, in *SubjectLearnFindReq) (*SubjectLearnFindResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFind(ctx, in)
}

func (m *defaultSu) SubjectLearnFindLisByUserId(ctx context.Context, in *SubjectLearnFindListByUserIdReq) (*SubjectLearnFindListByUserIdResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFindLisByUserId(ctx, in)
}

func (m *defaultSu) SubjectLearnFindLisBySubjectId(ctx context.Context, in *SubjectLearnFindListBySubjectIdReq) (*SubjectLearnFindListBySubjectIdResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.SubjectLearnFindLisBySubjectId(ctx, in)
}

func (m *defaultSu) AddSignalChoice(ctx context.Context, in *AddSignalChoiceReq) (*AddSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.AddSignalChoice(ctx, in)
}

func (m *defaultSu) UpdateSignalChoice(ctx context.Context, in *UpdateSignalChoiceReq) (*UpdateSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.UpdateSignalChoice(ctx, in)
}

func (m *defaultSu) DeleteSignalChoice(ctx context.Context, in *DeleteSignalChoiceReq) (*DeleteSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.DeleteSignalChoice(ctx, in)
}

func (m *defaultSu) FindSignalChoice(ctx context.Context, in *FindSignalChoiceReq) (*FindSignalChoiceResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindSignalChoice(ctx, in)
}

func (m *defaultSu) AddSelfPaper(ctx context.Context, in *AddSelfPaperReq) (*AddSelfPaperResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.AddSelfPaper(ctx, in)
}

func (m *defaultSu) UpdateSelfPaper(ctx context.Context, in *UpdateSelfPaperReq) (*UpdateSelfPaperResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.UpdateSelfPaper(ctx, in)
}

func (m *defaultSu) DeleteSelfPaper(ctx context.Context, in *DeleteSelfPaperReq) (*DeleteSelfPaperResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.DeleteSelfPaper(ctx, in)
}

func (m *defaultSu) FindSelfPaper(ctx context.Context, in *FindSelfPaperReq) (*FindSelfPaperResp, error) {
	client := su.NewSuClient(m.cli.Conn())
	return client.FindSelfPaper(ctx, in)
}
