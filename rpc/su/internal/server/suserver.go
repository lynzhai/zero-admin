// Code generated by goctl. DO NOT EDIT!
// Source: su.proto

package server

import (
	"context"

	"go-zero-admin/rpc/su/internal/logic"
	"go-zero-admin/rpc/su/internal/svc"
	"go-zero-admin/rpc/su/su"
)

type SuServer struct {
	svcCtx *svc.ServiceContext
}

func NewSuServer(svcCtx *svc.ServiceContext) *SuServer {
	return &SuServer{
		svcCtx: svcCtx,
	}
}

func (s *SuServer) SubjectAdd(ctx context.Context, in *su.SubjectAddReq) (*su.SubjectAddResp, error) {
	l := logic.NewSubjectAddLogic(ctx, s.svcCtx)
	return l.SubjectAdd(in)
}

func (s *SuServer) SubjectList(ctx context.Context, in *su.MainTeacherSubjectListReq) (*su.MainTeacherSubjectListReap, error) {
	l := logic.NewSubjectListLogic(ctx, s.svcCtx)
	return l.SubjectList(in)
}

func (s *SuServer) SubjectUpdate(ctx context.Context, in *su.SubjectUpdateReq) (*su.SubjectUpdateResp, error) {
	l := logic.NewSubjectUpdateLogic(ctx, s.svcCtx)
	return l.SubjectUpdate(in)
}

func (s *SuServer) SubjectDelete(ctx context.Context, in *su.SubjectDeleteReq) (*su.SubjectDeleteResp, error) {
	l := logic.NewSubjectDeleteLogic(ctx, s.svcCtx)
	return l.SubjectDelete(in)
}

//  根据subjectid 查抄subject 表内容
func (s *SuServer) SubjectFind(ctx context.Context, in *su.SubjectFindReq) (*su.SubjectFindResp, error) {
	l := logic.NewSubjectFindLogic(ctx, s.svcCtx)
	return l.SubjectFind(in)
}

//  查询某个Subject中的学生内容
func (s *SuServer) FindStudentsInSubject(ctx context.Context, in *su.FindStudentsInSubjectReq) (*su.FindStudentsInSubjectResp, error) {
	l := logic.NewFindStudentsInSubjectLogic(ctx, s.svcCtx)
	return l.FindStudentsInSubject(in)
}

//  查询课程中的 学生信息
func (s *SuServer) FindSubjectByStudent(ctx context.Context, in *su.FindSubjectByStudentReq) (*su.FindSubjectByStudentResp, error) {
	l := logic.NewFindSubjectByStudentLogic(ctx, s.svcCtx)
	return l.FindSubjectByStudent(in)
}

//  添加学生到课程
func (s *SuServer) AddStudentToSubject(ctx context.Context, in *su.AddStudentToSubjectReq) (*su.AddStudentToSubjectResp, error) {
	l := logic.NewAddStudentToSubjectLogic(ctx, s.svcCtx)
	return l.AddStudentToSubject(in)
}

//  从课程中删除学生
func (s *SuServer) DeleteStudentInSubject(ctx context.Context, in *su.DeleteStudentInSubjectReq) (*su.DeleteStudentInSubjectResp, error) {
	l := logic.NewDeleteStudentInSubjectLogic(ctx, s.svcCtx)
	return l.DeleteStudentInSubject(in)
}

func (s *SuServer) SubjectLearnAdd(ctx context.Context, in *su.SubjectLearnAddReq) (*su.SubjectLearnAddResp, error) {
	l := logic.NewSubjectLearnAddLogic(ctx, s.svcCtx)
	return l.SubjectLearnAdd(in)
}

func (s *SuServer) SubjectLearnUpdate(ctx context.Context, in *su.SubjectLearnUpdateReq) (*su.SubjectLearnUpdateResp, error) {
	l := logic.NewSubjectLearnUpdateLogic(ctx, s.svcCtx)
	return l.SubjectLearnUpdate(in)
}

func (s *SuServer) SubjectLearnDelete(ctx context.Context, in *su.SubjectLearnDeleteReq) (*su.SubjectLearnDeleteResp, error) {
	l := logic.NewSubjectLearnDeleteLogic(ctx, s.svcCtx)
	return l.SubjectLearnDelete(in)
}

func (s *SuServer) SubjectLearnFind(ctx context.Context, in *su.SubjectLearnFindReq) (*su.SubjectLearnFindResp, error) {
	l := logic.NewSubjectLearnFindLogic(ctx, s.svcCtx)
	return l.SubjectLearnFind(in)
}

func (s *SuServer) SubjectLearnFindLisByUserId(ctx context.Context, in *su.SubjectLearnFindListByUserIdReq) (*su.SubjectLearnFindListByUserIdResp, error) {
	l := logic.NewSubjectLearnFindLisByUserIdLogic(ctx, s.svcCtx)
	return l.SubjectLearnFindLisByUserId(in)
}

func (s *SuServer) SubjectLearnFindLisBySubjectId(ctx context.Context, in *su.SubjectLearnFindListBySubjectIdReq) (*su.SubjectLearnFindListBySubjectIdResp, error) {
	l := logic.NewSubjectLearnFindLisBySubjectIdLogic(ctx, s.svcCtx)
	return l.SubjectLearnFindLisBySubjectId(in)
}

func (s *SuServer) AddSignalChoice(ctx context.Context, in *su.AddSignalChoiceReq) (*su.AddSignalChoiceResp, error) {
	l := logic.NewAddSignalChoiceLogic(ctx, s.svcCtx)
	return l.AddSignalChoice(in)
}

func (s *SuServer) UpdateSignalChoice(ctx context.Context, in *su.UpdateSignalChoiceReq) (*su.UpdateSignalChoiceResp, error) {
	l := logic.NewUpdateSignalChoiceLogic(ctx, s.svcCtx)
	return l.UpdateSignalChoice(in)
}

func (s *SuServer) DeleteSignalChoice(ctx context.Context, in *su.DeleteSignalChoiceReq) (*su.DeleteSignalChoiceResp, error) {
	l := logic.NewDeleteSignalChoiceLogic(ctx, s.svcCtx)
	return l.DeleteSignalChoice(in)
}

func (s *SuServer) FindSignalChoice(ctx context.Context, in *su.FindSignalChoiceReq) (*su.FindSignalChoiceResp, error) {
	l := logic.NewFindSignalChoiceLogic(ctx, s.svcCtx)
	return l.FindSignalChoice(in)
}

func (s *SuServer) AddSelfPaper(ctx context.Context, in *su.AddSelfPaperReq) (*su.AddSelfPaperResp, error) {
	l := logic.NewAddSelfPaperLogic(ctx, s.svcCtx)
	return l.AddSelfPaper(in)
}

func (s *SuServer) UpdateSelfPaper(ctx context.Context, in *su.UpdateSelfPaperReq) (*su.UpdateSelfPaperResp, error) {
	l := logic.NewUpdateSelfPaperLogic(ctx, s.svcCtx)
	return l.UpdateSelfPaper(in)
}

func (s *SuServer) DeleteSelfPaper(ctx context.Context, in *su.DeleteSelfPaperReq) (*su.DeleteSelfPaperResp, error) {
	l := logic.NewDeleteSelfPaperLogic(ctx, s.svcCtx)
	return l.DeleteSelfPaper(in)
}

func (s *SuServer) FindSelfPaper(ctx context.Context, in *su.FindSelfPaperReq) (*su.FindSelfPaperResp, error) {
	l := logic.NewFindSelfPaperLogic(ctx, s.svcCtx)
	return l.FindSelfPaper(in)
}
